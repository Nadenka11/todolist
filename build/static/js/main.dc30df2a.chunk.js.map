{"version":3,"sources":["App.js","serviceWorker.js"],"names":["ItemsList","ToDoList","items","this","props","map","item","index","key","removeItem","markToDoDone","className","React","Component","ToDoListItem","onClickClose","bind","onClickDone","parseInt","ToDoClass","done","id","aria-hidden","onClick","value","type","ToDoForm","onSubmit","handleOptionChanged","state","selectedOption","refs","itemName","focus","event","preventDefault","newItemValue","addItem","form","reset","setState","target","countActive","forEach","e","list","document","getElementsByClassName","childNodes","getElementById","ref","placeholder","checked","onChange","ToDoHeader","ToDoApp","ToDoItem","unshift","length","itemIndex","splice","ToDo","push","initItems","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc30df2a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\nlet ItemsList = [];\n\nclass ToDoList extends React.Component {\n  render() {\n    var items = this.props.items.map((item, index) => {\n      return (\n          <ToDoListItem key={index} item={item} index={index} removeItem={this.props.removeItem}\n                        markToDoDone={this.props.markToDoDone}/>\n      );\n    });\n    return (\n        <ul className=\"list-group\"> {items} </ul>\n    );\n  }\n}\n\nclass ToDoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickClose = this.onClickClose.bind(this);\n    this.onClickDone = this.onClickDone.bind(this);\n  }\n\n  onClickClose() {\n    let index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n\n  onClickDone() {\n    let index = parseInt(this.props.index);\n    this.props.markToDoDone(index);\n  }\n\n  render() {\n    let ToDoClass = this.props.item.done ?\n        \"done\" : \"undone\";\n    return (\n        <li className=\"list-group-item \" id={this.props.item.index}>\n          <div className={ToDoClass}>\n            <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={this.onClickDone}></span>\n            {this.props.item.value}\n            <button type=\"button\" className={ToDoClass === \"done\" ? \"close\" : \"hidden\"}\n                    onClick={this.onClickClose}>&times;</button>\n          </div>\n        </li>\n    );\n  }\n}\n\nclass ToDoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleOptionChanged = this.handleOptionChanged.bind(this);\n    this.state = {selectedOption: 'all'};\n  }\n\n  componentDidMount() {\n    this.refs.itemName.focus();\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    let newItemValue = this.refs.itemName.value;\n\n    if (newItemValue) {\n      this.props.addItem({newItemValue});\n      this.refs.form.reset();\n    }\n  }\n\n  handleOptionChanged(event) {\n    this.setState({selectedOption: event.target.value})\n  }\n\n  render() {\n    let countActive = 0;\n    this.props.items.forEach((e) => {\n      if (!e.done) countActive++;\n    });\n\n    let list = document.getElementsByClassName(\"list-group\");\n    if (list.item(0) != null) {\n      let items = list.item(0).childNodes;\n      items.forEach(e => {\n        e.className = 'list-group-item '\n      });\n    }\n    if (this.state.selectedOption === 'active') {\n      this.props.items.forEach((e) => {\n        if (e.done) {\n          document.getElementById(e.index).className = \"hidden\";\n        }\n      });\n    } else if (this.state.selectedOption === 'completed') {\n      this.props.items.forEach((e) => {\n        if (!e.done) {\n          document.getElementById(e.index).className = \"hidden\";\n        }\n      });\n    }\n    return (\n        <div>\n          <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n            <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"New task\"/>\n            <button type=\"submit\" className=\"btn btn-default\">Add task</button>\n            <div/>\n            <div className=\"radio\">\n              <label>\n                <input type=\"radio\" value=\"all\" checked={this.state.selectedOption === 'all'}\n                       onChange={this.handleOptionChanged}/>\n                All\n              </label>\n            </div>\n            <div/>\n            <div className=\"radio\">\n              <label>\n                <input type=\"radio\" value=\"active\" checked={this.state.selectedOption === 'active'}\n                       onChange={this.handleOptionChanged}/>\n                Active\n              </label>\n            </div>\n            <div/>\n            <div className=\"radio\">\n              <label>\n                <input type=\"radio\" value=\"completed\"\n                       checked={this.state.selectedOption === 'completed'}\n                       onChange={this.handleOptionChanged}/>\n                Completed\n              </label>\n            </div>\n          </form>\n          <label>{countActive} aren't complete</label>\n        </div>\n    );\n  }\n}\n\nclass ToDoHeader extends React.Component\n{\n  render(){\n    return (<h1> ToDoList </h1>);\n  }\n}\nclass ToDoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.markToDoDone = this.markToDoDone.bind(this);\n    this.state = {ItemsList: ItemsList};\n  }\n\n  addItem(ToDoItem) {\n    ItemsList.unshift({\n      index: ItemsList.length + 1,\n      value: ToDoItem.newItemValue,\n      done: false\n    });\n    this.setState({ItemsList: ItemsList});\n  }\n\n  removeItem(itemIndex) {\n    ItemsList.splice(itemIndex, 1);\n    this.setState({ItemsList: ItemsList});\n  }\n\n  markToDoDone(itemIndex) {\n    let ToDo = ItemsList[itemIndex];\n    ItemsList.splice(itemIndex, 1);\n    ToDo.done = !ToDo.done;\n    ToDo.done ? ItemsList.push(ToDo) : ItemsList.unshift(ToDo);\n    this.setState({ItemsList: ItemsList});\n  }\n\n  render() {\n    return (\n        <div id=\"main\">\n          <ToDoHeader/>\n          <ToDoList items={this.props.initItems} removeItem={this.removeItem} markToDoDone={this.markToDoDone}/>\n          <ToDoForm addItem={this.addItem} items={this.state.ItemsList}/>\n        </div>\n    );\n  }\n}\n\nReactDOM.render(<ToDoApp initItems={ItemsList}/>, document.getElementById('root'));\n\nexport default ToDoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}